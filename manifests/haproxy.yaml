apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: metallb-system
data:
  haproxy.cfg: |
    global
        log stdout format raw local0 debug

    defaults
        log global
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms

    frontend ft_http_vip
        bind *:80
        option httplog
        mode http

        acl is_admin hdr(Host) -i -m reg ^[^.]+\.admin\.uds\.dev
        acl is_passthrough hdr(Host) -i -m reg ^keycloak\.uds\.dev
        acl is_tenant hdr(Host) -i -m reg ^[^.]+\.uds\.dev

        use_backend bk_http_admin if is_admin
        use_backend bk_http_passthrough if is_passthrough
        use_backend bk_http_tenant if is_tenant

    frontend ft_ssl_vip
        bind *:443
        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }
        mode tcp               # Set TCP mode for port 443

        acl is_admin req_ssl_sni -i -m reg ^[^.]+\.admin\.uds\.dev
        acl is_passthrough req_ssl_sni -i -m reg ^keycloak\.uds\.dev
        acl is_tenant req_ssl_sni -i -m reg ^[^.]+\.uds\.dev

        use_backend bk_ssl_admin if is_admin
        use_backend bk_ssl_passthrough if is_passthrough
        use_backend bk_ssl_tenant if is_tenant

    backend bk_http_admin
        mode http
        server admin ###ZARF_VAR_BASE_IP###.200:80 check

    backend bk_http_tenant
        mode http
        server tenant ###ZARF_VAR_BASE_IP###.201:80 check

    backend bk_http_passthrough
        mode http
        server passthrough ###ZARF_VAR_BASE_IP###.202:80 check

    backend bk_ssl_admin
        mode tcp
        server admin ###ZARF_VAR_BASE_IP###.200:443 check

    backend bk_ssl_tenant
        mode tcp
        server tenant ###ZARF_VAR_BASE_IP###.201:443 check

    backend bk_ssl_passthrough
        mode tcp
        server passthrough ###ZARF_VAR_BASE_IP###.202:443 check
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: haproxy
  namespace: metallb-system
spec:
  selector:
    matchLabels:
      name: haproxy
  template:
    metadata:
      labels:
        name: haproxy
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - name: haproxy
          image: cgr.dev/chainguard/haproxy:latest
          command: ["haproxy", "-V", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
          ports:
            - containerPort: 80
              hostPort: 20080
            - containerPort: 443
              hostPort: 20443
          volumeMounts:
            - name: config-volume
              mountPath: /usr/local/etc/haproxy/haproxy.cfg
              subPath: haproxy.cfg
      volumes:
        - name: config-volume
          configMap:
            name: haproxy-config
