# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json

kind: ZarfPackageConfig
metadata:
  name: uds-k3d
  description: "UDS K3d Cluster Setup. WARNING: This will destroy the cluster if it already exists."
  url: https://github.com/defenseunicorns/uds-k3d
  yolo: true
  # x-release-please-start-version
  version: "0.16.0"
  # x-release-please-end

variables:
  - name: CLUSTER_NAME
    description: "Name of the cluster"
    default: "uds"

  - name: K3D_IMAGE
    description: "K3d image to use"
    default: "rancher/k3s:v1.32.5-k3s1"

  - name: K3D_ULIMIT_NOFILE
    description: "Set ulimit for the number of files (nofile) to container runtime (Format: SOFT:HARD)"
    default: "1048576:1048576"

  - name: K3D_EXTRA_ARGS
    description: "Optionally pass k3d arguments to the default"
    default: ""

  - name: NGINX_EXTRA_PORTS
    description: "Optionally allow more ports through Nginx (combine with K3D_EXTRA_ARGS '-p <port>:<port>@server:*')"
    default: "[]"

  - name: DOMAIN
    description: "Cluster domain"
    default: "uds.dev"

  - name: ADMIN_DOMAIN
    description: "Domain for admin services, defaults to `admin.DOMAIN`"

components:
  - name: destroy-cluster
    required: true
    description: "Optionally destroy the cluster before creating it"
    actions:
      onDeploy:
        before:
          - cmd: k3d cluster delete ${ZARF_VAR_CLUSTER_NAME}
            description: "Destroy the cluster"

  - name: k3d-airgap-images
    required: true
    only:
      flavor: airgap
    description: "Load the airgap images for k3d into Docker"
    import:
      path: airgap/k3d
      name: k3d-airgap-images

  - name: create-cluster-airgap
    required: true
    only:
      flavor: airgap
    actions:
      onDeploy:
        before:
          - cmd: |
              echo ""
              echo "###################################################"
              echo "#                                                 #"
              echo "#      PACKAGE BEING DEPLOYED IN AIRGAP MODE      #"
              echo "#    THIS IS NOT MEANT TO BE USED IN PRODUCTION   #"
              echo "#                                                 #"
              echo "###################################################"
              echo ""
          - cmd: echo "true"
            description: "Set AIRGAP_MODE to true"
            mute: true
            setVariables:
              - name: AIRGAP_MODE

  - name: create-cluster
    required: true
    description: "Create the k3d cluster"
    actions:
      onDeploy:
        before:
          - cmd: |
              k3d_version=$(k3d version | grep -E -o "([0-9]+\.?){3}$")
              required_version="5.7.1"
              if ! printf "$required_version\n$k3d_version" | sort -V -c 2>/dev/null; then
                echo "This package requires a minimum k3d version of $required_version"
                echo "Please upgrade k3d (https://k3d.io/stable/#install-current-latest-release) and try again"
                exit 1
              fi
            description: "Check k3d version compatibility"
          - cmd: |
              VOLUME_MOUNT=""
              if [ "${ZARF_VAR_AIRGAP_MODE}" = "true" ]; then
                # renovate: datasource=docker depName=ghcr.io/k3d-io/k3d-tools
                export K3D_HELPER_IMAGE_TAG=5.8.3
                VOLUME_MOUNT="--volume k3s-airgap-images:/var/lib/rancher/k3s/agent/images"
              fi
              k3d cluster create \
              -p "80:80@server:*" \
              -p "443:443@server:*" \
              --api-port 6550 \
              --runtime-ulimit nofile="${ZARF_VAR_K3D_ULIMIT_NOFILE}" \
              --k3s-arg "--disable=traefik@server:*" \
              --k3s-arg "--disable=metrics-server@server:*" \
              --k3s-arg "--disable=servicelb@server:*" \
              --k3s-arg "--disable=local-storage@server:*" \
              --image ${ZARF_VAR_K3D_IMAGE} ${ZARF_VAR_K3D_EXTRA_ARGS} \
              ${VOLUME_MOUNT} \
              ${ZARF_VAR_CLUSTER_NAME}
            description: "Create the cluster"
        onSuccess:
          # Wait for CoreDNS to be available. This allows slow internet connections to complete before we move on and try to connect to a cluster that may or may not be ready to accept connections. CoreDNS is a deployment we can trust will always be there.
          - wait:
              cluster:
                kind: Pod
                condition: Ready
                name: "k8s-app=kube-dns"
                namespace: kube-system
            description: "Wait for CoreDNS to be ready"
          - cmd: |
              echo "You can access this cluster over SSH (note http redirect will redirect to port 80 instead of 8080):"
              echo "ssh -N -L 8080:localhost:80 -L 8443:localhost:443 -L 6550:localhost:6550"
              echo
              echo "To get the kubeconfig:"
              echo "k3d kubeconfig get ${ZARF_VAR_CLUSTER_NAME}"
              echo
              echo "This cluster can be destroyed with:"
              echo "k3d cluster delete ${ZARF_VAR_CLUSTER_NAME}"
            description: "Print out information about how to access the cluster remotely"

  - name: uds-dev-stack-airgap-images
    required: true
    only:
      flavor: airgap
    description: "Load the airgap images for uds-dev-stack into Docker"
    import:
      path: airgap/uds-dev-stack
      name: uds-dev-stack-airgap-images

  - name: uds-dev-stack
    required: true
    description: "Install MetalLB, NGINX, Minio, local-path-rwx and Ensure MachineID to meet UDS developer needs without later config changes"
    actions:
      onDeploy:
        before:
          - cmd: ./zarf tools kubectl get nodes -o=jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}' | cut -d'.' -f1-3
            description: "Load network ip base for MetalLB"
            setVariables:
              - name: BASE_IP
        after:
          - cmd: ./zarf tools kubectl rollout restart deployment coredns -n kube-system
            description: "Restart CoreDNS to pick up internal DNS override for uds.dev"
    charts:
      - name: metallb
        namespace: uds-dev-stack
        url: https://metallb.github.io/metallb
        version: 0.15.2
        valuesFiles:
          - "values/metallb-values.yaml"
      - name: uds-dev-stack
        namespace: uds-dev-stack
        localPath: chart
        # x-release-please-start-version
        version: 0.16.0
        # x-release-please-end
        valuesFiles:
          - "values/dev-stack-values.yaml"
        variables:
          - name: COREDNS_OVERRIDES
            # Defaults contain rewrites of `*.uds.dev` to the UDS core Istio tenant and admin gateways
            description: "CoreDNS overrides"
            path: coreDnsOverrides
      - name: minio
        namespace: uds-dev-stack
        version: 5.4.0
        url: https://charts.min.io/
        valuesFiles:
          - "values/minio-values.yaml"
